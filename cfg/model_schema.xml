<?xml version="1.0" encoding="UTF-8"?>
<!--
- Master dataset, version, and audit tables are maintained together to show a
    snapshot of data at a point in time.
- User workspace tables get a copy of the data from a dataset (or the initial
    creation of data).
- Auditing on user workspace tables could be done to allow undo/redo capabilities
    but is not necessary.
- Making changes to user workspace tables generates change records that describe
    how the change was made
- Creating a dataset applies the user changesets to another dataset (the first
    dataset is empty) creating the audit records and versioned data records.
- The final results from the changes are used to create the dataset snapshot.
- Any audit and data version records that are not in a snapshot are deleted.
- Meta tables and data tables are in <schema>_main.db
- Only data tables are in <schema>_<user>.db
- TODO: even though record_id is logically the primary key, it can't be defined
    as the primary key, because when the tables are created in the main db,
    it is not the primary key and will have duplicate values. This should be
    corrected in the code to create record_id as the primary key in the user
    tables but not in the main tables
###############################################################################
SQL statements necesary for versioning
______________________________________
CREATE - create audit record and data record - must know all relevant data
insert into audit (version_id,record_id,date_valid,modified_by) values(@vid,@rid,@now,@user);
insert into datatable (version_id,record_id,data1..n) values(@vid,@rid,@data1..n);
______________________________________
READ CURRENT
select * from datatable join audit on audit.version_id = datatable.version_id where date_invalid is null;
______________________________________
READ PREVIOUS
select * from datatable join audit on audit.version_id=datatable.version_id where @time is between date_valid and date_invalid
______________________________________
UPDATE - must know all data for object
update audit set date_invalid=@now where record_id=@rid and date_invalid is null;
insert into audit (version_id,record_id,date_valid,modified_by) values(@vid,@rid,@now,@user);
insert into datatable (version_id,record_id,data1..n) values (@vid,@rid,@data1..n);
______________________________________
DELETE -
update audit set date_invalid = @now where record_id=@rid and date_invalid is null;
###############################################################################
VIEWS
create view datatable_v as select version_id,record_id,data1..n from datatable inner join audit on datatable.version_id=audit.version_id where date_invalid is null
###############################################################################
TRANSFORM DATA
each column can have zero or more transform children describing how that column's data is transformed into another database
if no transform is defined for a column, it is not transformed to any database
the transformation code understands how to generate data in each type of database
-->
<schema name="Model">
  <table name="Substation" type="data"><!-- main --><!-- user -->
    <column name="version_id" data_type="uniqueidentifier" foreign_key="true" foreign_table="audit" foreign_column="version_id" relationship="one_to_one" />
    <column name="record_id" data_type="uniqueidentifier">
      <transform db_type='HABITAT' db_name='SCADAMOM' table_name='SUBSTN' column_name='MRID_SUBSTN'/>
      <transform db_type='HABITAT' db_name='NETMOM' table_name='ST' column_name='MRID_ST'/>
    </column>
    <column name="ID" data_type="varchar" data_size="8">
      <transform db_type='HABITAT' db_name='SCADAMOM' table_name='SUBSTN' column_name='ID_SUBSTN'/>
      <transform db_type='HABITAT' db_name='NETMOM' table_name='ST' column_name='ID_ST'/>
    </column>
  </table>
  <table name="DEVTYP" type="data"><!-- main --><!-- user -->
    <column name="version_id" data_type="uniqueidentifier" foreign_key="true" foreign_table="audit" foreign_column="version_id" relationship="one_to_one" />
    <column name="record_id" data_type="uniqueidentifier"/>
    <column name="ID" data_type="varchar" data_size="8"/>
    <column name="Substation" data_type="uniqueidentifier" foreign_key="true" foreign_table="Substation" foreign_column="record_id" relationship="one_to_many"/>
  </table>
  <table name="DEVICE" type="data"><!-- main --><!-- user -->
    <column name="version_id" data_type="uniqueidentifier" foreign_key="true" foreign_table="audit" foreign_column="version_id" relationship="one_to_one" />
    <column name="record_id" data_type="uniqueidentifier"/>
    <column name="ID" data_type="varchar" data_size="8"/>
    <column name="Devtyp" data_type="uniqueidentifier" foreign_key="true" foreign_table="DEVTYP" foreign_column="record_id" relationship="one_to_many"/>
  </table>
  <table name="POINT" type="data"><!-- main --><!-- user -->
    <column name="version_id" data_type="uniqueidentifier" foreign_key="true" foreign_table="audit" foreign_column="version_id" relationship="one_to_one" />
    <column name="record_id" data_type="uniqueidentifier"/>
    <column name="Point_Name" data_type="uniqueidentifier" foreign_key="true" foreign_table="PNTNAM" foreign_column="record_id" relationship="one_to_one"/>
    <column name="Device" data_type="uniqueidentifier" foreign_key="true" foreign_table="DEVICE" foreign_column="record_id" relationship="one_to_many"/>
  </table>
  <table name="PNTNAM" type="data">
    <column name="version_id" data_type="uniqueidentifier" foreign_key="true" foreign_table="audit" foreign_column="version_id" relationship="one_to_one" />
    <column name="record_id" data_type="uniqueidentifier" primary_key='true'/>
    <column name="ID" data_type="varchar" data_size="4"/>
    <column name="DESCRIPTION" data_type="varchar" data_size="100"/>
  </table>
  
  <!-- META TABLES -->
  <table name="dataset_info" type="meta"><!-- main -->
    <column name="dataset_id" data_type="bigint"/>
    <column name="description" data_type="varchar" data_size="1000"/>
    <column name="date_created" data_type="datetime"/>
    <column name="created_by" data_type="bigint"/>
  </table>
  <!-- snapshot of database at a point in time -->
  <table name="dataset" type="meta"><!-- main -->
    <column name="dataset_id" data_type="bigint"/>
    <column name="table_name" data_type="varchar" data_size="64" />
    <column name="version_id" data_type="uniqueidentifier" />
    <column name="record_id" data_type="uniqueidentifier" />
  </table>
  <!-- the audit table is updated by applying changes -->
  <!-- versioning table 'inherited' by all data tables -->
  <table name="audit" type="meta"><!-- main -->
    <column name="version_id" data_type="uniqueidentifier" primary_key="true"/> <!-- this identifies the actual row used in the data tables -->
    <column name="record_id" data_type="uniqueidentifier"/><!-- this is the object's identifier which will not change between row versions -->
    <column name="change_order" data_type="bigint"/><!-- this is the order that changes were made for this record - makes undo/redo possible -->
    <column name="date_valid" data_type="datetime"/><!-- this must be monotonically increasing for this object -->
    <column name="date_invalid" data_type="datetime"/>
    <column name="modified_by" data_type="bigint"/>
  </table>
  <table name="user" type="meta"><!-- main -->
    <column name="id" data_type="bigint" primary_key="true"/>
    <column name="name" data_type="varchar" data_size="100"/>
  </table>
  <!-- currently applied changesets for a user -->
  <table name="changeset_user" type="meta">
    <column name="changeset_id" data_type="bigint"/>
    <column name="user_id" data_type="bigint"/>
  </table>
  <!-- a changeset can belong to multiple datasets and a dataset has multiple changesets -->
  <table name="dataset_changeset" type="meta"><!-- main -->
    <column name="dataset_id" data_type="bigint"/>
    <column name="changeset_id" data_type="bigint"/>
  </table>
  <!-- changesets are a collection of logically related changes - makes applying changes correctly easier - changeset is transactioned -->
  <table name="changeset" type="meta"><!-- main -->
    <column name="id" data_type="bigint" primary_key="true"/>
    <column name="description" data_type="varchar" data_size="1000" />
    <column name="owner" data_type="bigint"/>
  </table>
  <!-- changes are macros for modifying records - they can be predictably repeated - data used to create sql statements -->
  <table name="change" type="meta"><!-- main -->
    <column name="id_changeset" data_type="bigint" foreign_key="true" foreign_table="changeset" foreign_column="id" relationship="one_to_many"/>
    <column name="id" data_type="bigint"/><!-- the change number in the changeset -->
    <column name="transaction_id" data_type="bigint"/><!-- a common identifier for changes that are part of the same transaction -->
    <column name="action" data_type="varchar" data_size="1"/><!-- Insert, Update, Delete (I,U,D) -->
    <column name="table_name" data_type="varchar" data_size="64"/>
    <column name="column_name" data_type="varchar" data_size="64"/>
    <column name="record_id" data_type="uniqueidentifier"/>
    <column name="old_value" data_type="blob" data_size="1024"/>
    <column name="new_value" data_type="blob" data_size="1024"/>
  </table>
</schema>
